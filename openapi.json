{
  "openapi": "3.0.3",
  "info": {
    "title": "Faarooq Backend API",
    "version": "0.1.0",
    "description": "OpenAPI spec for the Twitter-like backend (Express + Supabase)."
  },
  "servers": [
    { "url": "http://localhost:3000", "description": "Local" },
    { "url": "https://faarooq-backend.onrender.com", "description": "Production" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    },
    "responses": {
      "RateLimited": {
        "description": "Too many requests",
        "headers": {
          "Retry-After": { "schema": { "type": "integer" }, "description": "Seconds until reset" },
          "X-RateLimit-Limit": { "schema": { "type": "integer" } },
          "X-RateLimit-Remaining": { "schema": { "type": "integer" } },
          "X-RateLimit-Reset": {
            "schema": { "type": "integer" },
            "description": "Unix epoch seconds when window resets"
          }
        },
        "content": {
          "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
      },
      "NotFound": {
        "description": "Not found",
        "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error" } } }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": { "type": "string" },
              "message": { "type": "string" },
              "details": { "type": "object" }
            },
            "required": ["code"]
          }
        },
        "required": ["error"]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "handle": { "type": "string" },
          "display_name": { "type": "string" },
          "bio": { "type": "string" }
        },
        "required": ["id", "handle"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "token": { "type": "string" },
          "user": { "$ref": "#/components/schemas/User" }
        },
        "required": ["token", "user"]
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "author_id": { "type": "string", "format": "uuid" },
          "text": { "type": "string" },
          "reply_to_post_id": { "type": ["string", "null"], "format": "uuid" },
          "created_at": { "type": "string", "format": "date-time" },
          "deleted_at": { "type": ["string", "null"], "format": "date-time" }
        },
        "required": ["id", "author_id", "text", "created_at"]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "format": "uuid" },
          "user_id": { "type": "string", "format": "uuid" },
          "actor_id": { "type": "string", "format": "uuid" },
          "post_id": { "type": ["string", "null"], "format": "uuid" },
          "kind": { "type": "string", "enum": ["like", "follow", "reply", "repost"] },
          "created_at": { "type": "string", "format": "date-time" },
          "read": { "type": "boolean" }
        },
        "required": ["id", "user_id", "actor_id", "kind", "created_at", "read"]
      }
    }
  },
  "paths": {
    "/health": {
      "get": { "summary": "Health check", "responses": { "200": { "description": "OK" } } }
    },
    "/metrics": {
      "get": {
        "summary": "JSON metrics (counters + latency window)",
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/metrics.prom": {
      "get": {
        "summary": "Prometheus metrics format",
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/api/auth/signup": {
      "post": {
        "summary": "Create user and return app JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email" },
                  "password": { "type": "string", "minLength": 6 },
                  "handle": { "type": "string" }
                },
                "required": ["email", "password", "handle"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "409": {
            "description": "Handle already taken",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login and return app JWT",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string" }, "password": { "type": "string" } },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/AuthResponse" } }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout (revoke token jti if Redis present)",
        "responses": {
          "200": { "description": "OK" },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/api/auth/password/reset/request": {
      "post": {
        "summary": "Request password reset email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string", "format": "email" } },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/auth/password/reset/complete": {
      "post": {
        "summary": "Complete password reset with access token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": { "type": "string" },
                  "new_password": { "type": "string" }
                },
                "required": ["access_token", "new_password"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "summary": "Get current user profile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      },
      "put": {
        "summary": "Update current user profile",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "display_name": { "type": "string" }, "bio": { "type": "string" } }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/User" } } }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "409": {
            "description": "Handle already taken",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/users/me/avatar": {
      "post": {
        "summary": "Attach/update avatar (after uploading via media upload-url)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "avatar_url": { "type": "string", "format": "uri" } },
                "required": ["avatar_url"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/api/auth/verify/resend": {
      "post": {
        "summary": "Resend email verification (if not yet verified)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "email": { "type": "string", "format": "email" } },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/auth/verify/confirm": {
      "post": {
        "summary": "Confirm email verification using access token from verification link",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "access_token": { "type": "string" } },
                "required": ["access_token"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/posts": {
      "get": {
        "summary": "Get timeline feed (posts + repost activities; excludes soft-deleted posts)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "cursor", "in": "query", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "OK" },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      },
      "post": {
        "summary": "Create post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "text": { "type": "string", "maxLength": 280 } },
                "required": ["text"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/posts/{id}": {
      "get": {
        "summary": "Get single post (respects soft-delete & block/mute)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" }
        }
      }
    },
    "/api/reposts": {
      "post": {
        "summary": "Repost a post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "post_id": { "type": "string", "format": "uuid" } },
                "required": ["post_id"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": { "description": "Bad Request" }
        }
      },
      "delete": {
        "summary": "Unrepost a post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "post_id": { "type": "string", "format": "uuid" } },
                "required": ["post_id"]
              }
            }
          }
        },
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/api/posts/{id}/reply": {
      "post": {
        "summary": "Reply to a post",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "text": { "type": "string", "maxLength": 280 } },
                "required": ["text"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/posts/{id}/replies": {
      "get": {
        "summary": "List replies for a post (excludes soft-deleted)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          { "name": "cursor", "in": "query", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "OK" } }
      }
    },
    "/api/follows": {
      "post": {
        "summary": "Follow a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "followee_id": { "type": "string", "format": "uuid" } },
                "required": ["followee_id"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      },
      "delete": {
        "summary": "Unfollow a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "followee_id": { "type": "string", "format": "uuid" } },
                "required": ["followee_id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/likes": {
      "post": {
        "summary": "Like a post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "post_id": { "type": "string", "format": "uuid" } },
                "required": ["post_id"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      },
      "delete": {
        "summary": "Unlike a post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "post_id": { "type": "string", "format": "uuid" } },
                "required": ["post_id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/media/upload-url": {
      "post": {
        "summary": "Get a signed upload URL for media (client uploads directly to storage)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "file_name": { "type": "string" } },
                "required": ["file_name"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/media": {
      "post": {
        "summary": "Attach uploaded media to a post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_id": { "type": "string", "format": "uuid" },
                  "path": { "type": "string" },
                  "media_type": { "type": "string", "enum": ["image", "video", "gif"] }
                },
                "required": ["post_id", "path"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "404": { "$ref": "#/components/responses/NotFound" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "summary": "List notifications",
        "security": [{ "bearerAuth": [] }],
        "parameters": [{ "name": "cursor", "in": "query", "schema": { "type": "string" } }],
        "responses": {
          "200": { "description": "OK" },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    },
    "/api/moderation/block": {
      "post": {
        "summary": "Block a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "user_id": { "type": "string", "format": "uuid" } },
                "required": ["user_id"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/moderation/unblock": {
      "post": {
        "summary": "Unblock a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "user_id": { "type": "string", "format": "uuid" } },
                "required": ["user_id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/api/moderation/mute": {
      "post": {
        "summary": "Mute a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "user_id": { "type": "string", "format": "uuid" } },
                "required": ["user_id"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/moderation/unmute": {
      "post": {
        "summary": "Unmute a user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "user_id": { "type": "string", "format": "uuid" } },
                "required": ["user_id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" }
        }
      }
    },
    "/api/moderation/report": {
      "post": {
        "summary": "Report a user or post",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": { "type": "string", "format": "uuid" },
                  "post_id": { "type": "string", "format": "uuid" },
                  "reason": { "type": "string" }
                },
                "required": ["reason"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Created" },
          "400": {
            "description": "Invalid payload",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "429": { "$ref": "#/components/responses/RateLimited" }
        }
      }
    },
    "/api/notifications/read": {
      "post": {
        "summary": "Mark notifications read",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": { "type": "array", "items": { "type": "string", "format": "uuid" } }
                },
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": { "description": "OK" },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Error" } }
            }
          }
        }
      }
    }
  }
}
